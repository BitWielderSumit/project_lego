# Prometheus Stack Configuration for Local Development
# Optimized for Docker Desktop with full observability

# === PROMETHEUS CONFIGURATION ===
prometheus:
  prometheusSpec:
    # Resource settings for local development
    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 500m
    
    # Storage configuration
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
    
    # Scrape interval for metrics collection
    scrapeInterval: 30s
    evaluationInterval: 30s
    
    # Retention period for metrics
    retention: 7d
    
    # ServiceMonitor selector (empty to select all)
    serviceMonitorSelector: {}
    
    # PrometheusRule selector (empty to select all)
    ruleSelector: {}
    
    # Pod monitor selector
    podMonitorSelector: {}

# === GRAFANA CONFIGURATION ===
grafana:
  enabled: true
  
  # Admin credentials
  adminUser: admin
  adminPassword: observatory-admin
  
  # Service configuration for external access
  service:
    type: LoadBalancer
    port: 3000
    
  # Resource settings for local development
  resources:
    requests:
      memory: 256Mi
      cpu: 100m
    limits:
      memory: 512Mi
      cpu: 200m
  
  # Persistence for dashboards and settings
  persistence:
    enabled: true
    size: 1Gi
    
  # Default dashboards
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default
  
  # Sidecar configuration for automatic dashboard provisioning
  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
      labelValue: "1"
      folder: /tmp/dashboards
      searchNamespace: observability
      provider:
        foldersFromFilesStructure: true
        allowUiUpdates: true
        disableDelete: false
      # Enable dashboard auto-discovery from ConfigMaps
      watchMethod: WATCH
      resource: configmap
      # Folder creation from configmap annotations
      folderAnnotation: k8s-sidecar-target-directory
      # Enable logging for troubleshooting
      logLevel: INFO

  # Grafana configuration
  grafana.ini:
    server:
      root_url: "%(protocol)s://%(domain)s:%(http_port)s/grafana/"
      serve_from_sub_path: true
    security:
      allow_embedding: true
    auth.anonymous:
      enabled: true
      org_role: Viewer

# === ALERTMANAGER CONFIGURATION ===
alertmanager:
  enabled: true
  
  alertmanagerSpec:
    # Resource settings for local development
    resources:
      requests:
        memory: 128Mi
        cpu: 50m
      limits:
        memory: 256Mi
        cpu: 100m
    
    # Storage configuration
    storage:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 1Gi
    
    # Service configuration
    service:
      type: ClusterIP
      port: 9093
      
    # Basic configuration (can be enhanced later)
    config:
      global:
        smtp_smarthost: 'localhost:587'
        smtp_from: 'alertmanager@observatory.local'
      route:
        group_by: ['alertname']
        group_wait: 10s
        group_interval: 10s
        repeat_interval: 1h
        receiver: 'web.hook'
      receivers:
      - name: 'web.hook'
        webhook_configs:
        - url: 'http://localhost:5001/'

# === NODE EXPORTER ===
nodeExporter:
  enabled: true
  
  # Resource settings
  resources:
    requests:
      memory: 64Mi
      cpu: 25m
    limits:
      memory: 128Mi
      cpu: 50m

# === KUBE STATE METRICS ===
kubeStateMetrics:
  enabled: true
  
  # Resource settings
  resources:
    requests:
      memory: 128Mi
      cpu: 50m
    limits:
      memory: 256Mi
      cpu: 100m

# === PROMETHEUS OPERATOR ===
prometheusOperator:
  enabled: true
  
  # Resource settings
  resources:
    requests:
      memory: 256Mi
      cpu: 100m
    limits:
      memory: 512Mi
      cpu: 200m
  
  # Admission webhooks (disable for local development)
  admissionWebhooks:
    enabled: false
    
  # TLS configuration (simplified for local)
  tls:
    enabled: false

# === ADDITIONAL COMPONENTS ===
# Disable components not needed for local development
kubeApiServer:
  enabled: false
  
kubeControllerManager:
  enabled: false
  
kubeScheduler:
  enabled: false
  
kubeProxy:
  enabled: false
  
kubeEtcd:
  enabled: false

# === RBAC CONFIGURATION ===
rbac:
  create: true
  pspEnabled: false

# === SERVICE ACCOUNT ===
serviceAccount:
  create: true
  name: prometheus-stack 